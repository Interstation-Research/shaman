// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { LogType } from "../common.sol";

library ShamanLogs {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "ShamanLogs", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000005368616d616e4c6f6773000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0062050101202001200000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, bytes32, uint256, bool, uint256, string)
  Schema constant _valueSchema = Schema.wrap(0x00620501005f1f601fc500000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "logId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "logType";
    fieldNames[1] = "shamanId";
    fieldNames[2] = "amount";
    fieldNames[3] = "success";
    fieldNames[4] = "createdAt";
    fieldNames[5] = "logMetadata";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get logType.
   */
  function getLogType(bytes32 logId) internal view returns (LogType logType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return LogType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get logType.
   */
  function _getLogType(bytes32 logId) internal view returns (LogType logType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return LogType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set logType.
   */
  function setLogType(bytes32 logId, LogType logType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(logType)), _fieldLayout);
  }

  /**
   * @notice Set logType.
   */
  function _setLogType(bytes32 logId, LogType logType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(logType)), _fieldLayout);
  }

  /**
   * @notice Get shamanId.
   */
  function getShamanId(bytes32 logId) internal view returns (bytes32 shamanId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get shamanId.
   */
  function _getShamanId(bytes32 logId) internal view returns (bytes32 shamanId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set shamanId.
   */
  function setShamanId(bytes32 logId, bytes32 shamanId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((shamanId)), _fieldLayout);
  }

  /**
   * @notice Set shamanId.
   */
  function _setShamanId(bytes32 logId, bytes32 shamanId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((shamanId)), _fieldLayout);
  }

  /**
   * @notice Get amount.
   */
  function getAmount(bytes32 logId) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get amount.
   */
  function _getAmount(bytes32 logId) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set amount.
   */
  function setAmount(bytes32 logId, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(bytes32 logId, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Get success.
   */
  function getSuccess(bytes32 logId) internal view returns (bool success) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get success.
   */
  function _getSuccess(bytes32 logId) internal view returns (bool success) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set success.
   */
  function setSuccess(bytes32 logId, bool success) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((success)), _fieldLayout);
  }

  /**
   * @notice Set success.
   */
  function _setSuccess(bytes32 logId, bool success) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((success)), _fieldLayout);
  }

  /**
   * @notice Get createdAt.
   */
  function getCreatedAt(bytes32 logId) internal view returns (uint256 createdAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get createdAt.
   */
  function _getCreatedAt(bytes32 logId) internal view returns (uint256 createdAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set createdAt.
   */
  function setCreatedAt(bytes32 logId, uint256 createdAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((createdAt)), _fieldLayout);
  }

  /**
   * @notice Set createdAt.
   */
  function _setCreatedAt(bytes32 logId, uint256 createdAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((createdAt)), _fieldLayout);
  }

  /**
   * @notice Get logMetadata.
   */
  function getLogMetadata(bytes32 logId) internal view returns (string memory logMetadata) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get logMetadata.
   */
  function _getLogMetadata(bytes32 logId) internal view returns (string memory logMetadata) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set logMetadata.
   */
  function setLogMetadata(bytes32 logId, string memory logMetadata) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((logMetadata)));
  }

  /**
   * @notice Set logMetadata.
   */
  function _setLogMetadata(bytes32 logId, string memory logMetadata) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((logMetadata)));
  }

  /**
   * @notice Get the length of logMetadata.
   */
  function lengthLogMetadata(bytes32 logId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of logMetadata.
   */
  function _lengthLogMetadata(bytes32 logId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of logMetadata.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemLogMetadata(bytes32 logId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of logMetadata.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemLogMetadata(bytes32 logId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to logMetadata.
   */
  function pushLogMetadata(bytes32 logId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to logMetadata.
   */
  function _pushLogMetadata(bytes32 logId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from logMetadata.
   */
  function popLogMetadata(bytes32 logId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from logMetadata.
   */
  function _popLogMetadata(bytes32 logId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of logMetadata at `_index`.
   */
  function updateLogMetadata(bytes32 logId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of logMetadata at `_index`.
   */
  function _updateLogMetadata(bytes32 logId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(
    bytes32 logId
  )
    internal
    view
    returns (
      LogType logType,
      bytes32 shamanId,
      uint256 amount,
      bool success,
      uint256 createdAt,
      string memory logMetadata
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    bytes32 logId
  )
    internal
    view
    returns (
      LogType logType,
      bytes32 shamanId,
      uint256 amount,
      bool success,
      uint256 createdAt,
      string memory logMetadata
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 logId,
    LogType logType,
    bytes32 shamanId,
    uint256 amount,
    bool success,
    uint256 createdAt,
    string memory logMetadata
  ) internal {
    bytes memory _staticData = encodeStatic(logType, shamanId, amount, success, createdAt);

    EncodedLengths _encodedLengths = encodeLengths(logMetadata);
    bytes memory _dynamicData = encodeDynamic(logMetadata);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 logId,
    LogType logType,
    bytes32 shamanId,
    uint256 amount,
    bool success,
    uint256 createdAt,
    string memory logMetadata
  ) internal {
    bytes memory _staticData = encodeStatic(logType, shamanId, amount, success, createdAt);

    EncodedLengths _encodedLengths = encodeLengths(logMetadata);
    bytes memory _dynamicData = encodeDynamic(logMetadata);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (LogType logType, bytes32 shamanId, uint256 amount, bool success, uint256 createdAt) {
    logType = LogType(uint8(Bytes.getBytes1(_blob, 0)));

    shamanId = (Bytes.getBytes32(_blob, 1));

    amount = (uint256(Bytes.getBytes32(_blob, 33)));

    success = (_toBool(uint8(Bytes.getBytes1(_blob, 65))));

    createdAt = (uint256(Bytes.getBytes32(_blob, 66)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory logMetadata) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    logMetadata = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  )
    internal
    pure
    returns (
      LogType logType,
      bytes32 shamanId,
      uint256 amount,
      bool success,
      uint256 createdAt,
      string memory logMetadata
    )
  {
    (logType, shamanId, amount, success, createdAt) = decodeStatic(_staticData);

    (logMetadata) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 logId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 logId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    LogType logType,
    bytes32 shamanId,
    uint256 amount,
    bool success,
    uint256 createdAt
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(logType, shamanId, amount, success, createdAt);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(string memory logMetadata) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(logMetadata).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory logMetadata) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((logMetadata)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    LogType logType,
    bytes32 shamanId,
    uint256 amount,
    bool success,
    uint256 createdAt,
    string memory logMetadata
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(logType, shamanId, amount, success, createdAt);

    EncodedLengths _encodedLengths = encodeLengths(logMetadata);
    bytes memory _dynamicData = encodeDynamic(logMetadata);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 logId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = logId;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
